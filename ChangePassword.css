import React, { useEffect, useState } from "react";
import { Form, Formik } from "formik";
import { FormikTextField } from "../formik";
import { Button, IconButton, InputAdornment, Snackbar } from "@material-ui/core";
import Alert from "@material-ui/lab/Alert";
import { CheckCircle, Visibility, VisibilityOff, Refresh } from "@material-ui/icons";
import { LoadCanvasTemplateNoReload, loadCaptchaEnginge, validateCaptcha } from "react-simple-captcha";
import styles from "./styles/signupStyles";
import PropTypes from "prop-types";
import useSignup from "./hooks/useSignup";
import { formSchema, initialValues } from "./services/signupFormServices";
import { signup } from "../../helpers/authService";

const Signup = ({ location, history, isAuthenticated }) => {
    const classes = styles();
    const { from } = location.state || { from: { pathname: "/" } };
    const { errorMessage, handleSignup } = useSignup(signup);
    const [snackbarOpen, setSnackbarOpen] = useState(false);
    const [snackbarMessage, setSnackbarMessage] = useState("");
    const [snackbarSeverity, setSnackbarSeverity] = useState("success");
    const [showPassword, setShowPassword] = useState(false);
    const [showConfirmPassword, setShowConfirmPassword] = useState(false);
    
    // OTP states
    const [emailOtpSent, setEmailOtpSent] = useState(false);
    const [emailOtp, setEmailOtp] = useState("");
    const [isEmailVerified, setIsEmailVerified] = useState(false);
    const [mobileOtpSent, setMobileOtpSent] = useState(false);
    const [mobileOtp, setMobileOtp] = useState("");
    const [isMobileVerified, setIsMobileVerified] = useState(false);
    const [verifiedEmail, setVerifiedEmail] = useState("");
    const [verifiedMobile, setVerifiedMobile] = useState("");

    useEffect(() => {
        loadCaptchaEnginge(6);
        if (isAuthenticated) {
            history.replace(from);
        }
    }, []);

    const handleReloadCaptcha = () => {
        loadCaptchaEnginge(6);
    };

    return (
        <div className={classes.signupContainer}>
            <Formik
                initialValues={{ ...initialValues, captcha: "" }}
                onSubmit={async (values, { setErrors }) => {
                    if (!validateCaptcha(values.captcha)) {
                        setErrors({ captcha: "Invalid CAPTCHA. Try again." });
                        return;
                    }

                    if (!isEmailVerified || !isMobileVerified) {
                        setSnackbarMessage("Please verify your email and mobile number with OTP.");
                        setSnackbarSeverity("error");
                        setSnackbarOpen(true);
                        return;
                    }

                    const { success, field, message } = await handleSignup(values);
                    if (field) {
                        setErrors({ [field]: message });
                    } else {
                        setSnackbarMessage(message);
                        setSnackbarSeverity(success ? "success" : "error");
                        setSnackbarOpen(true);
                    }

                    if (success) {
                        setTimeout(() => (window.location.href = "/login"), 1500);
                    }
                }}
                validationSchema={formSchema}
            >
                {(props) => {
                    const { isValid, errors, values } = props;
                    return (
                        <Form className={classes.signupForm}>
                            <FormikTextField 
                                required 
                                name="name" 
                                label="Name" 
                                margin="dense" 
                            />
                            <FormikTextField 
                                required 
                                name="username" 
                                label="Username" 
                                margin="dense" 
                            />
                            <FormikTextField
                                required
                                type="email"
                                name="email"
                                label="Email"
                                margin="dense"
                                InputProps={{
                                    endAdornment: isEmailVerified && (
                                        <InputAdornment position="end">
                                            <CheckCircle style={{ color: "green" }} />
                                        </InputAdornment>
                                    ),
                                }}
                                onBlur={(e) => {
                                    if (isEmailVerified && e.target.value !== verifiedEmail) {
                                        setIsEmailVerified(false);
                                        setVerifiedEmail("");
                                    }
                                }}
                            />
                            <Button
                                variant="contained"
                                type="button"
                                color="primary"
                                className={classes.signupButton}
                                disabled={!!errors.email || isEmailVerified}
                                onClick={() => {
                                    setEmailOtpSent(true);
                                    setVerifiedEmail(values.email);
                                }}
                            >
                                Send OTP
                            </Button>
                            
                            {emailOtpSent && !isEmailVerified && (
                                <div className={classes.otpContainer}>
                                    <FormikTextField
                                        name="emailOtp"
                                        label="Email OTP"
                                        margin="dense"
                                        value={emailOtp}
                                        onChange={(e) => setEmailOtp(e.target.value.replace(/\D/g, "").slice(0, 4))}
                                        inputProps={{ maxLength: 4 }}
                                    />
                                    <Button
                                        variant="contained"
                                        color="primary"
                                        disabled={emailOtp.length !== 4}
                                        onClick={() => {
                                            if (emailOtp === "1234") {
                                                setIsEmailVerified(true);
                                                setEmailOtpSent(false);
                                                setEmailOtp("");
                                            } else {
                                                setSnackbarMessage("Invalid OTP");
                                                setSnackbarSeverity("error");
                                                setSnackbarOpen(true);
                                            }
                                        }}
                                    >
                                        Verify
                                    </Button>
                                </div>
                            )}

                            <FormikTextField
                                required
                                name="mobilenumber"
                                label="Mobile Number"
                                margin="dense"
                                InputProps={{
                                    endAdornment: isMobileVerified && (
                                        <InputAdornment position="end">
                                            <CheckCircle style={{ color: "green" }} />
                                        </InputAdornment>
                                    ),
                                }}
                                onBlur={(e) => {
                                    if (isMobileVerified && e.target.value !== verifiedMobile) {
                                        setIsMobileVerified(false);
                                        setVerifiedMobile("");
                                    }
                                }}
                            />
                            <Button
                                variant="contained"
                                type="button"
                                color="primary"
                                className={classes.signupButton}
                                disabled={!!errors.mobilenumber || isMobileVerified}
                                onClick={() => {
                                    setMobileOtpSent(true);
                                    setVerifiedMobile(values.mobilenumber);
                                }}
                            >
                                Send OTP
                            </Button>

                            {mobileOtpSent && !isMobileVerified && (
                                <div className={classes.otpContainer}>
                                    <FormikTextField
                                        name="mobileOtp"
                                        label="Mobile OTP"
                                        margin="dense"
                                        value={mobileOtp}
                                        onChange={(e) => setMobileOtp(e.target.value.replace(/\D/g, "").slice(0, 4))}
                                        inputProps={{ maxLength: 4 }}
                                    />
                                    <Button
                                        variant="contained"
                                        color="primary"
                                        disabled={mobileOtp.length !== 4}
                                        onClick={() => {
                                            if (mobileOtp === "1234") {
                                                setIsMobileVerified(true);
                                                setMobileOtpSent(false);
                                                setMobileOtp("");
                                            } else {
                                                setSnackbarMessage("Invalid OTP");
                                                setSnackbarSeverity("error");
                                                setSnackbarOpen(true);
                                            }
                                        }}
                                    >
                                        Verify
                                    </Button>
                                </div>
                            )}

                            {/* Rest of the form fields */}
                            <FormikTextField
                                required
                                type={showPassword ? "text" : "password"}
                                name="password"
                                label="Password"
                                margin="dense"
                                InputProps={{
                                    endAdornment: (
                                        <InputAdornment position="end">
                                            <IconButton onClick={() => setShowPassword(!showPassword)}>
                                                {showPassword ? <VisibilityOff /> : <Visibility />}
                                            </IconButton>
                                        </InputAdornment>
                                    ),
                                }}
                            />
                            
                            {/* Confirm Password and other fields */}
                            
                            <div className={classes.signupButtonContainer}>
                                <Button
                                    variant="contained"
                                    type="submit"
                                    disabled={!isValid || !isEmailVerified || !isMobileVerified}
                                    color="primary"
                                    className={classes.signupButton}
                                >
                                    Signup
                                </Button>
                            </div>
                        </Form>
                    );
                }}
            </Formik>
        </div>
    );
};




// styles.js
otpContainer: {
    display: 'flex',
    alignItems: 'center',
    gap: theme.spacing(1),
    marginTop: theme.spacing(1),
    marginBottom: theme.spacing(1),
},




// signupFormServices.js
otp: Yup.string()
    .matches(/^[0-9]{4}$/, "Enter a valid OTP")
    .required("OTP is required"),
